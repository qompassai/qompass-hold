/* automatically generated by rust-bindgen 0.71.1 */

pub const OQS_KEM_alg_bike_l1: &[u8; 8] = b"BIKE-L1\0";
pub const OQS_KEM_alg_bike_l3: &[u8; 8] = b"BIKE-L3\0";
pub const OQS_KEM_alg_bike_l5: &[u8; 8] = b"BIKE-L5\0";
pub const OQS_KEM_alg_classic_mceliece_348864: &[u8; 24] = b"Classic-McEliece-348864\0";
pub const OQS_KEM_alg_classic_mceliece_348864f: &[u8; 25] = b"Classic-McEliece-348864f\0";
pub const OQS_KEM_alg_classic_mceliece_460896: &[u8; 24] = b"Classic-McEliece-460896\0";
pub const OQS_KEM_alg_classic_mceliece_460896f: &[u8; 25] = b"Classic-McEliece-460896f\0";
pub const OQS_KEM_alg_classic_mceliece_6688128: &[u8; 25] = b"Classic-McEliece-6688128\0";
pub const OQS_KEM_alg_classic_mceliece_6688128f: &[u8; 26] = b"Classic-McEliece-6688128f\0";
pub const OQS_KEM_alg_classic_mceliece_6960119: &[u8; 25] = b"Classic-McEliece-6960119\0";
pub const OQS_KEM_alg_classic_mceliece_6960119f: &[u8; 26] = b"Classic-McEliece-6960119f\0";
pub const OQS_KEM_alg_classic_mceliece_8192128: &[u8; 25] = b"Classic-McEliece-8192128\0";
pub const OQS_KEM_alg_classic_mceliece_8192128f: &[u8; 26] = b"Classic-McEliece-8192128f\0";
pub const OQS_KEM_alg_hqc_128: &[u8; 8] = b"HQC-128\0";
pub const OQS_KEM_alg_hqc_192: &[u8; 8] = b"HQC-192\0";
pub const OQS_KEM_alg_hqc_256: &[u8; 8] = b"HQC-256\0";
pub const OQS_KEM_alg_kyber_512: &[u8; 9] = b"Kyber512\0";
pub const OQS_KEM_alg_kyber_768: &[u8; 9] = b"Kyber768\0";
pub const OQS_KEM_alg_kyber_1024: &[u8; 10] = b"Kyber1024\0";
pub const OQS_KEM_alg_ml_kem_512: &[u8; 11] = b"ML-KEM-512\0";
pub const OQS_KEM_alg_ml_kem_768: &[u8; 11] = b"ML-KEM-768\0";
pub const OQS_KEM_alg_ml_kem_1024: &[u8; 12] = b"ML-KEM-1024\0";
pub const OQS_KEM_alg_ntruprime_sntrup761: &[u8; 10] = b"sntrup761\0";
pub const OQS_KEM_alg_frodokem_640_aes: &[u8; 17] = b"FrodoKEM-640-AES\0";
pub const OQS_KEM_alg_frodokem_640_shake: &[u8; 19] = b"FrodoKEM-640-SHAKE\0";
pub const OQS_KEM_alg_frodokem_976_aes: &[u8; 17] = b"FrodoKEM-976-AES\0";
pub const OQS_KEM_alg_frodokem_976_shake: &[u8; 19] = b"FrodoKEM-976-SHAKE\0";
pub const OQS_KEM_alg_frodokem_1344_aes: &[u8; 18] = b"FrodoKEM-1344-AES\0";
pub const OQS_KEM_alg_frodokem_1344_shake: &[u8; 20] = b"FrodoKEM-1344-SHAKE\0";
pub const OQS_KEM_algs_length: u32 = 29;
pub const OQS_KEM_bike_l1_length_secret_key: u32 = 5223;
pub const OQS_KEM_bike_l1_length_public_key: u32 = 1541;
pub const OQS_KEM_bike_l1_length_ciphertext: u32 = 1573;
pub const OQS_KEM_bike_l1_length_shared_secret: u32 = 32;
pub const OQS_KEM_bike_l1_length_keypair_seed: u32 = 0;
pub const OQS_KEM_bike_l3_length_secret_key: u32 = 10105;
pub const OQS_KEM_bike_l3_length_public_key: u32 = 3083;
pub const OQS_KEM_bike_l3_length_ciphertext: u32 = 3115;
pub const OQS_KEM_bike_l3_length_shared_secret: u32 = 32;
pub const OQS_KEM_bike_l3_length_keypair_seed: u32 = 0;
pub const OQS_KEM_bike_l5_length_secret_key: u32 = 16494;
pub const OQS_KEM_bike_l5_length_public_key: u32 = 5122;
pub const OQS_KEM_bike_l5_length_ciphertext: u32 = 5154;
pub const OQS_KEM_bike_l5_length_shared_secret: u32 = 32;
pub const OQS_KEM_bike_l5_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_348864_length_public_key: u32 = 261120;
pub const OQS_KEM_classic_mceliece_348864_length_secret_key: u32 = 6492;
pub const OQS_KEM_classic_mceliece_348864_length_ciphertext: u32 = 96;
pub const OQS_KEM_classic_mceliece_348864_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_348864_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_348864f_length_public_key: u32 = 261120;
pub const OQS_KEM_classic_mceliece_348864f_length_secret_key: u32 = 6492;
pub const OQS_KEM_classic_mceliece_348864f_length_ciphertext: u32 = 96;
pub const OQS_KEM_classic_mceliece_348864f_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_348864f_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_460896_length_public_key: u32 = 524160;
pub const OQS_KEM_classic_mceliece_460896_length_secret_key: u32 = 13608;
pub const OQS_KEM_classic_mceliece_460896_length_ciphertext: u32 = 156;
pub const OQS_KEM_classic_mceliece_460896_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_460896_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_460896f_length_public_key: u32 = 524160;
pub const OQS_KEM_classic_mceliece_460896f_length_secret_key: u32 = 13608;
pub const OQS_KEM_classic_mceliece_460896f_length_ciphertext: u32 = 156;
pub const OQS_KEM_classic_mceliece_460896f_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_460896f_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_6688128_length_public_key: u32 = 1044992;
pub const OQS_KEM_classic_mceliece_6688128_length_secret_key: u32 = 13932;
pub const OQS_KEM_classic_mceliece_6688128_length_ciphertext: u32 = 208;
pub const OQS_KEM_classic_mceliece_6688128_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_6688128_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_6688128f_length_public_key: u32 = 1044992;
pub const OQS_KEM_classic_mceliece_6688128f_length_secret_key: u32 = 13932;
pub const OQS_KEM_classic_mceliece_6688128f_length_ciphertext: u32 = 208;
pub const OQS_KEM_classic_mceliece_6688128f_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_6688128f_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_6960119_length_public_key: u32 = 1047319;
pub const OQS_KEM_classic_mceliece_6960119_length_secret_key: u32 = 13948;
pub const OQS_KEM_classic_mceliece_6960119_length_ciphertext: u32 = 194;
pub const OQS_KEM_classic_mceliece_6960119_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_6960119_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_6960119f_length_public_key: u32 = 1047319;
pub const OQS_KEM_classic_mceliece_6960119f_length_secret_key: u32 = 13948;
pub const OQS_KEM_classic_mceliece_6960119f_length_ciphertext: u32 = 194;
pub const OQS_KEM_classic_mceliece_6960119f_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_6960119f_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_8192128_length_public_key: u32 = 1357824;
pub const OQS_KEM_classic_mceliece_8192128_length_secret_key: u32 = 14120;
pub const OQS_KEM_classic_mceliece_8192128_length_ciphertext: u32 = 208;
pub const OQS_KEM_classic_mceliece_8192128_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_8192128_length_keypair_seed: u32 = 0;
pub const OQS_KEM_classic_mceliece_8192128f_length_public_key: u32 = 1357824;
pub const OQS_KEM_classic_mceliece_8192128f_length_secret_key: u32 = 14120;
pub const OQS_KEM_classic_mceliece_8192128f_length_ciphertext: u32 = 208;
pub const OQS_KEM_classic_mceliece_8192128f_length_shared_secret: u32 = 32;
pub const OQS_KEM_classic_mceliece_8192128f_length_keypair_seed: u32 = 0;
pub const OQS_KEM_hqc_128_length_public_key: u32 = 2249;
pub const OQS_KEM_hqc_128_length_secret_key: u32 = 2305;
pub const OQS_KEM_hqc_128_length_ciphertext: u32 = 4433;
pub const OQS_KEM_hqc_128_length_shared_secret: u32 = 64;
pub const OQS_KEM_hqc_128_length_keypair_seed: u32 = 0;
pub const OQS_KEM_hqc_192_length_public_key: u32 = 4522;
pub const OQS_KEM_hqc_192_length_secret_key: u32 = 4586;
pub const OQS_KEM_hqc_192_length_ciphertext: u32 = 8978;
pub const OQS_KEM_hqc_192_length_shared_secret: u32 = 64;
pub const OQS_KEM_hqc_192_length_keypair_seed: u32 = 0;
pub const OQS_KEM_hqc_256_length_public_key: u32 = 7245;
pub const OQS_KEM_hqc_256_length_secret_key: u32 = 7317;
pub const OQS_KEM_hqc_256_length_ciphertext: u32 = 14421;
pub const OQS_KEM_hqc_256_length_shared_secret: u32 = 64;
pub const OQS_KEM_hqc_256_length_keypair_seed: u32 = 0;
pub const OQS_KEM_kyber_512_length_public_key: u32 = 800;
pub const OQS_KEM_kyber_512_length_secret_key: u32 = 1632;
pub const OQS_KEM_kyber_512_length_ciphertext: u32 = 768;
pub const OQS_KEM_kyber_512_length_shared_secret: u32 = 32;
pub const OQS_KEM_kyber_512_length_keypair_seed: u32 = 0;
pub const OQS_KEM_kyber_768_length_public_key: u32 = 1184;
pub const OQS_KEM_kyber_768_length_secret_key: u32 = 2400;
pub const OQS_KEM_kyber_768_length_ciphertext: u32 = 1088;
pub const OQS_KEM_kyber_768_length_shared_secret: u32 = 32;
pub const OQS_KEM_kyber_768_length_keypair_seed: u32 = 0;
pub const OQS_KEM_kyber_1024_length_public_key: u32 = 1568;
pub const OQS_KEM_kyber_1024_length_secret_key: u32 = 3168;
pub const OQS_KEM_kyber_1024_length_ciphertext: u32 = 1568;
pub const OQS_KEM_kyber_1024_length_shared_secret: u32 = 32;
pub const OQS_KEM_kyber_1024_length_keypair_seed: u32 = 0;
pub const OQS_KEM_ml_kem_512_length_public_key: u32 = 800;
pub const OQS_KEM_ml_kem_512_length_secret_key: u32 = 1632;
pub const OQS_KEM_ml_kem_512_length_ciphertext: u32 = 768;
pub const OQS_KEM_ml_kem_512_length_shared_secret: u32 = 32;
pub const OQS_KEM_ml_kem_512_length_keypair_seed: u32 = 64;
pub const OQS_KEM_ml_kem_768_length_public_key: u32 = 1184;
pub const OQS_KEM_ml_kem_768_length_secret_key: u32 = 2400;
pub const OQS_KEM_ml_kem_768_length_ciphertext: u32 = 1088;
pub const OQS_KEM_ml_kem_768_length_shared_secret: u32 = 32;
pub const OQS_KEM_ml_kem_768_length_keypair_seed: u32 = 64;
pub const OQS_KEM_ml_kem_1024_length_public_key: u32 = 1568;
pub const OQS_KEM_ml_kem_1024_length_secret_key: u32 = 3168;
pub const OQS_KEM_ml_kem_1024_length_ciphertext: u32 = 1568;
pub const OQS_KEM_ml_kem_1024_length_shared_secret: u32 = 32;
pub const OQS_KEM_ml_kem_1024_length_keypair_seed: u32 = 64;
pub const OQS_KEM_ntruprime_sntrup761_length_public_key: u32 = 1158;
pub const OQS_KEM_ntruprime_sntrup761_length_secret_key: u32 = 1763;
pub const OQS_KEM_ntruprime_sntrup761_length_ciphertext: u32 = 1039;
pub const OQS_KEM_ntruprime_sntrup761_length_shared_secret: u32 = 32;
pub const OQS_KEM_ntruprime_sntrup761_length_keypair_seed: u32 = 0;
pub const OQS_KEM_frodokem_640_aes_length_public_key: u32 = 9616;
pub const OQS_KEM_frodokem_640_aes_length_secret_key: u32 = 19888;
pub const OQS_KEM_frodokem_640_aes_length_ciphertext: u32 = 9720;
pub const OQS_KEM_frodokem_640_aes_length_shared_secret: u32 = 16;
pub const OQS_KEM_frodokem_640_aes_length_keypair_seed: u32 = 0;
pub const OQS_KEM_frodokem_640_shake_length_public_key: u32 = 9616;
pub const OQS_KEM_frodokem_640_shake_length_secret_key: u32 = 19888;
pub const OQS_KEM_frodokem_640_shake_length_ciphertext: u32 = 9720;
pub const OQS_KEM_frodokem_640_shake_length_shared_secret: u32 = 16;
pub const OQS_KEM_frodokem_640_shake_length_keypair_seed: u32 = 0;
pub const OQS_KEM_frodokem_976_aes_length_public_key: u32 = 15632;
pub const OQS_KEM_frodokem_976_aes_length_secret_key: u32 = 31296;
pub const OQS_KEM_frodokem_976_aes_length_ciphertext: u32 = 15744;
pub const OQS_KEM_frodokem_976_aes_length_shared_secret: u32 = 24;
pub const OQS_KEM_frodokem_976_aes_length_keypair_seed: u32 = 0;
pub const OQS_KEM_frodokem_976_shake_length_public_key: u32 = 15632;
pub const OQS_KEM_frodokem_976_shake_length_secret_key: u32 = 31296;
pub const OQS_KEM_frodokem_976_shake_length_ciphertext: u32 = 15744;
pub const OQS_KEM_frodokem_976_shake_length_shared_secret: u32 = 24;
pub const OQS_KEM_frodokem_976_shake_length_keypair_seed: u32 = 0;
pub const OQS_KEM_frodokem_1344_aes_length_public_key: u32 = 21520;
pub const OQS_KEM_frodokem_1344_aes_length_secret_key: u32 = 43088;
pub const OQS_KEM_frodokem_1344_aes_length_ciphertext: u32 = 21632;
pub const OQS_KEM_frodokem_1344_aes_length_shared_secret: u32 = 32;
pub const OQS_KEM_frodokem_1344_aes_length_keypair_seed: u32 = 0;
pub const OQS_KEM_frodokem_1344_shake_length_public_key: u32 = 21520;
pub const OQS_KEM_frodokem_1344_shake_length_secret_key: u32 = 43088;
pub const OQS_KEM_frodokem_1344_shake_length_ciphertext: u32 = 21632;
pub const OQS_KEM_frodokem_1344_shake_length_shared_secret: u32 = 32;
pub const OQS_KEM_frodokem_1344_shake_length_keypair_seed: u32 = 0;
unsafe extern "C" {
    pub fn OQS_KEM_alg_identifier(i: usize) -> *const ::libc::c_char;
}
unsafe extern "C" {
    pub fn OQS_KEM_alg_count() -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn OQS_KEM_alg_is_enabled(method_name: *const ::libc::c_char) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OQS_KEM {
    pub method_name: *const ::libc::c_char,
    pub alg_version: *const ::libc::c_char,
    pub claimed_nist_level: u8,
    pub ind_cca: bool,
    pub length_public_key: usize,
    pub length_secret_key: usize,
    pub length_ciphertext: usize,
    pub length_shared_secret: usize,
    pub length_keypair_seed: usize,
    pub keypair_derand: ::core::option::Option<
        unsafe extern "C" fn(
            public_key: *mut u8,
            secret_key: *mut u8,
            seed: *const u8,
        ) -> OQS_STATUS,
    >,
    pub keypair: ::core::option::Option<
        unsafe extern "C" fn(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS,
    >,
    pub encaps: ::core::option::Option<
        unsafe extern "C" fn(
            ciphertext: *mut u8,
            shared_secret: *mut u8,
            public_key: *const u8,
        ) -> OQS_STATUS,
    >,
    pub decaps: ::core::option::Option<
        unsafe extern "C" fn(
            shared_secret: *mut u8,
            ciphertext: *const u8,
            secret_key: *const u8,
        ) -> OQS_STATUS,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OQS_KEM"][::core::mem::size_of::<OQS_KEM>() - 96usize];
    ["Alignment of OQS_KEM"][::core::mem::align_of::<OQS_KEM>() - 8usize];
    ["Offset of field: OQS_KEM::method_name"]
        [::core::mem::offset_of!(OQS_KEM, method_name) - 0usize];
    ["Offset of field: OQS_KEM::alg_version"]
        [::core::mem::offset_of!(OQS_KEM, alg_version) - 8usize];
    ["Offset of field: OQS_KEM::claimed_nist_level"]
        [::core::mem::offset_of!(OQS_KEM, claimed_nist_level) - 16usize];
    ["Offset of field: OQS_KEM::ind_cca"][::core::mem::offset_of!(OQS_KEM, ind_cca) - 17usize];
    ["Offset of field: OQS_KEM::length_public_key"]
        [::core::mem::offset_of!(OQS_KEM, length_public_key) - 24usize];
    ["Offset of field: OQS_KEM::length_secret_key"]
        [::core::mem::offset_of!(OQS_KEM, length_secret_key) - 32usize];
    ["Offset of field: OQS_KEM::length_ciphertext"]
        [::core::mem::offset_of!(OQS_KEM, length_ciphertext) - 40usize];
    ["Offset of field: OQS_KEM::length_shared_secret"]
        [::core::mem::offset_of!(OQS_KEM, length_shared_secret) - 48usize];
    ["Offset of field: OQS_KEM::length_keypair_seed"]
        [::core::mem::offset_of!(OQS_KEM, length_keypair_seed) - 56usize];
    ["Offset of field: OQS_KEM::keypair_derand"]
        [::core::mem::offset_of!(OQS_KEM, keypair_derand) - 64usize];
    ["Offset of field: OQS_KEM::keypair"][::core::mem::offset_of!(OQS_KEM, keypair) - 72usize];
    ["Offset of field: OQS_KEM::encaps"][::core::mem::offset_of!(OQS_KEM, encaps) - 80usize];
    ["Offset of field: OQS_KEM::decaps"][::core::mem::offset_of!(OQS_KEM, decaps) - 88usize];
};
unsafe extern "C" {
    pub fn OQS_KEM_new(method_name: *const ::libc::c_char) -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_keypair_derand(
        kem: *const OQS_KEM,
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_keypair(
        kem: *const OQS_KEM,
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_encaps(
        kem: *const OQS_KEM,
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_decaps(
        kem: *const OQS_KEM,
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_free(kem: *mut OQS_KEM);
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l1_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l1_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l1_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l1_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l1_decaps(
        shared_secret: *mut u8,
        ciphertext: *const ::libc::c_uchar,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l3_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l3_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l3_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l3_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l3_decaps(
        shared_secret: *mut u8,
        ciphertext: *const ::libc::c_uchar,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l5_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l5_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l5_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l5_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_bike_l5_decaps(
        shared_secret: *mut u8,
        ciphertext: *const ::libc::c_uchar,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864f_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864f_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_348864f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896f_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896f_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_460896f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128f_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128f_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6688128f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119f_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119f_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_6960119f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128f_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128f_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128f_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128f_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_classic_mceliece_8192128f_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_128_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_128_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_128_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_128_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_128_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_192_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_192_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_192_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_192_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_192_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_256_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_256_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_256_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_256_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_hqc_256_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_512_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_512_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_512_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_512_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_512_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_768_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_768_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_768_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_768_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_768_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_1024_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_1024_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_1024_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_1024_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_kyber_1024_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_512_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_512_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_512_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_512_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_512_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_768_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_768_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_768_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_768_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_768_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_1024_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_1024_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_1024_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_1024_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ml_kem_1024_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup761_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup761_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup761_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup761_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_ntruprime_sntrup761_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_aes_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_aes_keypair(public_key: *mut u8, secret_key: *mut u8)
        -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_aes_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_aes_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_aes_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_shake_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_shake_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_shake_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_shake_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_640_shake_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_aes_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_aes_keypair(public_key: *mut u8, secret_key: *mut u8)
        -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_aes_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_aes_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_aes_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_shake_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_shake_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_shake_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_shake_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_976_shake_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_aes_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_aes_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_aes_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_aes_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_aes_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_shake_new() -> *mut OQS_KEM;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_shake_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_shake_keypair_derand(
        public_key: *mut u8,
        secret_key: *mut u8,
        seed: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_shake_encaps(
        ciphertext: *mut u8,
        shared_secret: *mut u8,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_KEM_frodokem_1344_shake_decaps(
        shared_secret: *mut u8,
        ciphertext: *const u8,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
