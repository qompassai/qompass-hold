/* automatically generated by rust-bindgen 0.71.1 */

pub const OQS_SIG_alg_dilithium_2: &[u8; 11] = b"Dilithium2\0";
pub const OQS_SIG_alg_dilithium_3: &[u8; 11] = b"Dilithium3\0";
pub const OQS_SIG_alg_dilithium_5: &[u8; 11] = b"Dilithium5\0";
pub const OQS_SIG_alg_ml_dsa_44: &[u8; 10] = b"ML-DSA-44\0";
pub const OQS_SIG_alg_ml_dsa_65: &[u8; 10] = b"ML-DSA-65\0";
pub const OQS_SIG_alg_ml_dsa_87: &[u8; 10] = b"ML-DSA-87\0";
pub const OQS_SIG_alg_falcon_512: &[u8; 11] = b"Falcon-512\0";
pub const OQS_SIG_alg_falcon_1024: &[u8; 12] = b"Falcon-1024\0";
pub const OQS_SIG_alg_falcon_padded_512: &[u8; 18] = b"Falcon-padded-512\0";
pub const OQS_SIG_alg_falcon_padded_1024: &[u8; 19] = b"Falcon-padded-1024\0";
pub const OQS_SIG_alg_sphincs_sha2_128f_simple: &[u8; 26] = b"SPHINCS+-SHA2-128f-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_128s_simple: &[u8; 26] = b"SPHINCS+-SHA2-128s-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_192f_simple: &[u8; 26] = b"SPHINCS+-SHA2-192f-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_192s_simple: &[u8; 26] = b"SPHINCS+-SHA2-192s-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_256f_simple: &[u8; 26] = b"SPHINCS+-SHA2-256f-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_256s_simple: &[u8; 26] = b"SPHINCS+-SHA2-256s-simple\0";
pub const OQS_SIG_alg_sphincs_shake_128f_simple: &[u8; 27] = b"SPHINCS+-SHAKE-128f-simple\0";
pub const OQS_SIG_alg_sphincs_shake_128s_simple: &[u8; 27] = b"SPHINCS+-SHAKE-128s-simple\0";
pub const OQS_SIG_alg_sphincs_shake_192f_simple: &[u8; 27] = b"SPHINCS+-SHAKE-192f-simple\0";
pub const OQS_SIG_alg_sphincs_shake_192s_simple: &[u8; 27] = b"SPHINCS+-SHAKE-192s-simple\0";
pub const OQS_SIG_alg_sphincs_shake_256f_simple: &[u8; 27] = b"SPHINCS+-SHAKE-256f-simple\0";
pub const OQS_SIG_alg_sphincs_shake_256s_simple: &[u8; 27] = b"SPHINCS+-SHAKE-256s-simple\0";
pub const OQS_SIG_alg_mayo_1: &[u8; 7] = b"MAYO-1\0";
pub const OQS_SIG_alg_mayo_2: &[u8; 7] = b"MAYO-2\0";
pub const OQS_SIG_alg_mayo_3: &[u8; 7] = b"MAYO-3\0";
pub const OQS_SIG_alg_mayo_5: &[u8; 7] = b"MAYO-5\0";
pub const OQS_SIG_alg_cross_rsdp_128_balanced: &[u8; 24] = b"cross-rsdp-128-balanced\0";
pub const OQS_SIG_alg_cross_rsdp_128_fast: &[u8; 20] = b"cross-rsdp-128-fast\0";
pub const OQS_SIG_alg_cross_rsdp_128_small: &[u8; 21] = b"cross-rsdp-128-small\0";
pub const OQS_SIG_alg_cross_rsdp_192_balanced: &[u8; 24] = b"cross-rsdp-192-balanced\0";
pub const OQS_SIG_alg_cross_rsdp_192_fast: &[u8; 20] = b"cross-rsdp-192-fast\0";
pub const OQS_SIG_alg_cross_rsdp_192_small: &[u8; 21] = b"cross-rsdp-192-small\0";
pub const OQS_SIG_alg_cross_rsdp_256_balanced: &[u8; 24] = b"cross-rsdp-256-balanced\0";
pub const OQS_SIG_alg_cross_rsdp_256_fast: &[u8; 20] = b"cross-rsdp-256-fast\0";
pub const OQS_SIG_alg_cross_rsdp_256_small: &[u8; 21] = b"cross-rsdp-256-small\0";
pub const OQS_SIG_alg_cross_rsdpg_128_balanced: &[u8; 25] = b"cross-rsdpg-128-balanced\0";
pub const OQS_SIG_alg_cross_rsdpg_128_fast: &[u8; 21] = b"cross-rsdpg-128-fast\0";
pub const OQS_SIG_alg_cross_rsdpg_128_small: &[u8; 22] = b"cross-rsdpg-128-small\0";
pub const OQS_SIG_alg_cross_rsdpg_192_balanced: &[u8; 25] = b"cross-rsdpg-192-balanced\0";
pub const OQS_SIG_alg_cross_rsdpg_192_fast: &[u8; 21] = b"cross-rsdpg-192-fast\0";
pub const OQS_SIG_alg_cross_rsdpg_192_small: &[u8; 22] = b"cross-rsdpg-192-small\0";
pub const OQS_SIG_alg_cross_rsdpg_256_balanced: &[u8; 25] = b"cross-rsdpg-256-balanced\0";
pub const OQS_SIG_alg_cross_rsdpg_256_fast: &[u8; 21] = b"cross-rsdpg-256-fast\0";
pub const OQS_SIG_alg_cross_rsdpg_256_small: &[u8; 22] = b"cross-rsdpg-256-small\0";
pub const OQS_SIG_alg_uov_ov_Is: &[u8; 6] = b"OV-Is\0";
pub const OQS_SIG_alg_uov_ov_Ip: &[u8; 6] = b"OV-Ip\0";
pub const OQS_SIG_alg_uov_ov_III: &[u8; 7] = b"OV-III\0";
pub const OQS_SIG_alg_uov_ov_V: &[u8; 5] = b"OV-V\0";
pub const OQS_SIG_alg_uov_ov_Is_pkc: &[u8; 10] = b"OV-Is-pkc\0";
pub const OQS_SIG_alg_uov_ov_Ip_pkc: &[u8; 10] = b"OV-Ip-pkc\0";
pub const OQS_SIG_alg_uov_ov_III_pkc: &[u8; 11] = b"OV-III-pkc\0";
pub const OQS_SIG_alg_uov_ov_V_pkc: &[u8; 9] = b"OV-V-pkc\0";
pub const OQS_SIG_alg_uov_ov_Is_pkc_skc: &[u8; 14] = b"OV-Is-pkc-skc\0";
pub const OQS_SIG_alg_uov_ov_Ip_pkc_skc: &[u8; 14] = b"OV-Ip-pkc-skc\0";
pub const OQS_SIG_alg_uov_ov_III_pkc_skc: &[u8; 15] = b"OV-III-pkc-skc\0";
pub const OQS_SIG_alg_uov_ov_V_pkc_skc: &[u8; 13] = b"OV-V-pkc-skc\0";
pub const OQS_SIG_algs_length: u32 = 56;
unsafe extern "C" {
    pub fn OQS_SIG_alg_identifier(i: usize) -> *const ::libc::c_char;
}
unsafe extern "C" {
    pub fn OQS_SIG_alg_count() -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn OQS_SIG_alg_is_enabled(method_name: *const ::libc::c_char) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OQS_SIG {
    pub method_name: *const ::libc::c_char,
    pub alg_version: *const ::libc::c_char,
    pub claimed_nist_level: u8,
    pub euf_cma: bool,
    pub suf_cma: bool,
    pub sig_with_ctx_support: bool,
    pub length_public_key: usize,
    pub length_secret_key: usize,
    pub length_signature: usize,
    pub keypair: ::core::option::Option<
        unsafe extern "C" fn(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS,
    >,
    pub sign: ::core::option::Option<
        unsafe extern "C" fn(
            signature: *mut u8,
            signature_len: *mut usize,
            message: *const u8,
            message_len: usize,
            secret_key: *const u8,
        ) -> OQS_STATUS,
    >,
    pub sign_with_ctx_str: ::core::option::Option<
        unsafe extern "C" fn(
            signature: *mut u8,
            signature_len: *mut usize,
            message: *const u8,
            message_len: usize,
            ctx_str: *const u8,
            ctx_str_len: usize,
            secret_key: *const u8,
        ) -> OQS_STATUS,
    >,
    pub verify: ::core::option::Option<
        unsafe extern "C" fn(
            message: *const u8,
            message_len: usize,
            signature: *const u8,
            signature_len: usize,
            public_key: *const u8,
        ) -> OQS_STATUS,
    >,
    pub verify_with_ctx_str: ::core::option::Option<
        unsafe extern "C" fn(
            message: *const u8,
            message_len: usize,
            signature: *const u8,
            signature_len: usize,
            ctx_str: *const u8,
            ctx_str_len: usize,
            public_key: *const u8,
        ) -> OQS_STATUS,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OQS_SIG"][::core::mem::size_of::<OQS_SIG>() - 88usize];
    ["Alignment of OQS_SIG"][::core::mem::align_of::<OQS_SIG>() - 8usize];
    ["Offset of field: OQS_SIG::method_name"]
        [::core::mem::offset_of!(OQS_SIG, method_name) - 0usize];
    ["Offset of field: OQS_SIG::alg_version"]
        [::core::mem::offset_of!(OQS_SIG, alg_version) - 8usize];
    ["Offset of field: OQS_SIG::claimed_nist_level"]
        [::core::mem::offset_of!(OQS_SIG, claimed_nist_level) - 16usize];
    ["Offset of field: OQS_SIG::euf_cma"][::core::mem::offset_of!(OQS_SIG, euf_cma) - 17usize];
    ["Offset of field: OQS_SIG::suf_cma"][::core::mem::offset_of!(OQS_SIG, suf_cma) - 18usize];
    ["Offset of field: OQS_SIG::sig_with_ctx_support"]
        [::core::mem::offset_of!(OQS_SIG, sig_with_ctx_support) - 19usize];
    ["Offset of field: OQS_SIG::length_public_key"]
        [::core::mem::offset_of!(OQS_SIG, length_public_key) - 24usize];
    ["Offset of field: OQS_SIG::length_secret_key"]
        [::core::mem::offset_of!(OQS_SIG, length_secret_key) - 32usize];
    ["Offset of field: OQS_SIG::length_signature"]
        [::core::mem::offset_of!(OQS_SIG, length_signature) - 40usize];
    ["Offset of field: OQS_SIG::keypair"][::core::mem::offset_of!(OQS_SIG, keypair) - 48usize];
    ["Offset of field: OQS_SIG::sign"][::core::mem::offset_of!(OQS_SIG, sign) - 56usize];
    ["Offset of field: OQS_SIG::sign_with_ctx_str"]
        [::core::mem::offset_of!(OQS_SIG, sign_with_ctx_str) - 64usize];
    ["Offset of field: OQS_SIG::verify"][::core::mem::offset_of!(OQS_SIG, verify) - 72usize];
    ["Offset of field: OQS_SIG::verify_with_ctx_str"]
        [::core::mem::offset_of!(OQS_SIG, verify_with_ctx_str) - 80usize];
};
unsafe extern "C" {
    pub fn OQS_SIG_new(method_name: *const ::libc::c_char) -> *mut OQS_SIG;
}
unsafe extern "C" {
    pub fn OQS_SIG_keypair(
        sig: *const OQS_SIG,
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_SIG_sign(
        sig: *const OQS_SIG,
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_SIG_sign_with_ctx_str(
        sig: *const OQS_SIG,
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx_str: *const u8,
        ctx_str_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_SIG_verify(
        sig: *const OQS_SIG,
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_SIG_verify_with_ctx_str(
        sig: *const OQS_SIG,
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx_str: *const u8,
        ctx_str_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
unsafe extern "C" {
    pub fn OQS_SIG_free(sig: *mut OQS_SIG);
}
